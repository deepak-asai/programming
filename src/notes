Tree
Print Left View of Binary Tree - having a max-value which indicates what is the current max left level. increase that max level on encoutering new max 
Check for BST - Do inorder traversal. u will get a array in ascending order
Print Bottom View of Binary Tree - Have a additional param in Node which stored horizontal distance from the center. Use a map where key is Vertical distance. on encountering a new node check for a entery in map. if there is a entry with horizontal level less, replace that value in map, else if they are same, append a value to it. use a TreeMap for ordering the elements according to the keys
Print a Binary Tree in Vertical Order - Use a map which stores the Horizontal distance as a key and nodes as its values
Level order traversal in spiral form - Use 2 stacks. and insert into them alternatively
Connect Nodes at Same Level - need to explore
Lowest Common Ancestor in a BST - simple. traverse a tree. the first node that you encounter a value that is between the given 2 nodes, print that
Convert a given Binary Tree to Doubly Linked List - have a prev pointer. recursively call the left subtree. when prev in null, make head of DLL as root. else root.left = prev, prev.right = root, finally prev = root. then recursively call right subtree.
Write Code to Determine if Two Trees are Identical or Not = start with 2 ptrs for the root node. if two ptrs are null, return true. else, check 2 ptrs data to be same && recursively call right && recursively call left. 
Given a binary tree, check whether it is a mirror of itself - same as before problem. while calling recursively, call left + right && right + left.
Height of Binary Tree - traverse the tree, maintain max height. 
Maximum Path Sum - https://www.geeksforgeeks.org/find-maximum-path-sum-in-a-binary-tree/ - maintain left_sum (l), right_sum (r). max_l_r = max(l, r). max_/curr_l_or_r/_/curr_l_r/. return that value.
Diameter of a Binary Tree - explore
Number of leaf nodes - if left and right child are null, increase leaf node count.
Check if given Binary Tree is Height Balanced or Not - explore
Serialize and Deserialize a Binary Tree - explore

DP
Longest Increasing Subsequence
Longest Common Subsequence
0 â€“ 1 Knapsack Problem
Minimum number of jumps
Edit Distance
Coin Change Problem
Egg Dropping Puzzle
Tiling Problem
Minimum number of jumps to reach end

Sort
Insertion sort

Parenthesis Checker - use a stack. single stack will do.
Reverse words in a given string - Native idea is to reverse individual words in the string. then reverse the whole string. New idea is to use split operator in java. use that and store split words in a array. traverse the array for last and start appending to a empty string.
Permutations of a given string - swap the characters with a fixed variable. start with fixed variable as 0; if fixed == size of str, return. Run a loop from i=fixed to size, swap (str, i, fixed), call recursively with fixed incremented by 1, again backtrack the swap.
Longest Palindrome in a String - explore
Recursively remove all adjacent duplicates - can do
Check if string is rotated by two places- can do
Roman Number to Integer- can do
Anagram- can do
Longest Common Substring - explore
Remove Duplicates- can do
Form a Palindrome - explore
Longest Distinct Characters in the string - explore
Implement Atoi 
Implement strstr - can do
Longest Common Prefix - explore


Linked list:
Detecting cycle in a list. Have 2 ptrs "slow and fast". increment slow ptr by 1 and fast ptr by 2. at some point if they meet, there is a loop. (Reason why it works..) initial distance between 2 nodes will be 1, then 2, then 3 then finally n(size of list). At n, they both meet.

 
Others
Median of running numbers
Snake and ladder
LRU implementation
Find Transition Point - use binary search
Search an element in an array where difference between adjacent elements is 1 - start with the start index. find diff between given number and current index. jump to that index.
finding square root - do binary search
Finding kth largest element in the tree- do inorder traversal. maitain count of node visite. stop when count becomes k
Connect n ropes with minimum cost - implemet huffman coding usin min heap

Theory:
heap memory allocation: https://dzone.com/articles/stack-vs-heap-understanding-java-memory-allocation
dangling pointer - https://stackoverflow.com/questions/4976668/creating-a-dangling-pointer-using-java
paging from operating systems - explore
